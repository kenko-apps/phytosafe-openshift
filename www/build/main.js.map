{"version":3,"sources":["../../src/pages/formulaire/resultats/resultats.ts","../../src/pages/autocomplete/autocomplete.ts","../../src/providers/traitement.ts","../../node_modules/@angular/core/@angular lazy","../../src lazy","../../src/providers/localstockage.ts","../../src/pages/accueil/accueil.ts","../../src/pages/formulaire/donnees-perso/donnees-perso.ts","../../src/pages/formulaire/maladie/maladie.ts","../../src/pages/formulaire/therapies-alter/therapies-alter.ts","../../src/pages/formulaire/traitement-nom/traitement-nom.ts","../../src/providers/diacritics.ts","../../src/providers/validators.ts","../../src/providers/inactif.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/app/app.component.ts","../../src/providers/incompatibilite.ts","../../src/providers/formulaire.ts","../../src/providers/api.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Component, OnInit} from '@angular/core';\nimport { NavController} from 'ionic-angular';\nimport { Network } from '@ionic-native/network';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { Formulaire } from '../../../providers/formulaire';\nimport { LocalStockage } from '../../../providers/localstockage';\nimport { Incompatibilite } from '../../../providers/incompatibilite';\n\n@Component({\n  selector: 'resultats',\n  templateUrl: 'resultats.html'\n})\nexport class Resultats implements OnInit {\n\n  resultatsForm: FormGroup;\n  submitAttempt: boolean = false;\n\n  incompRes = [];\n  connectivityCheck: boolean;\n  informationCheck: boolean = false;\n  errorCheck: boolean = false;\n\n  constructor(public navCtrl: NavController, public formBuilder: FormBuilder,public translate: TranslateService, public localstockage: LocalStockage, public incompatibilite: Incompatibilite, public formulaire: Formulaire, private network: Network) {\n    this.resultatsForm = formBuilder.group({\n      emailForm: ['', Validators.pattern('(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)')],\n    });\n    //Initialise les observateurs de la connexion et de la déconnexion\n    network.onConnect().subscribe(() => {\n      this.connectivityCheck = true;\n    });\n    network.onDisconnect().subscribe(() => {\n      this.connectivityCheck = false;\n    });\n  }\n\n  ngOnInit(){\n    if (this.connectivityCheck == true){\n      //Vérifier si certaines données du formulaire n'ont pas été envoyées\n      this.localstockage.getData(\"idForm\").then((val)=> {\n        this.localstockage.getAllData().then((dataForm)=>{\n          if (dataForm!=null){\n            //Si certaines données n'ont pas été envoyées, il faut créer/mettre à jour le formulaire avec toutes les données stockées.\n            if (val==null){\n              //Si le formulaire n'a pas été créé, il faut le créer\n              this.formulaire.createForm(dataForm).toPromise().then((res) => {\n                this.localstockage.getData(\"idForm\").then((val)=> {\n                  this.incompatibilite.getIncomp(val).toPromise().then((res) => {\n                    this.incompRes = [res.blob];//A VERIFIER - BLOB PERMET DE RETROUVER LE BODY DE LA REPONSE!!\n                    this.informationCheck = true;\n                  }).catch((err)=>{\n                    console.error('ERROR', err);\n                    this.errorCheck = true;\n                  });\n                });\n              });\n            } else {\n              //Sinon, il faut le mettre à jour\n              this.formulaire.updateForm(val,dataForm).toPromise().then((res) => {\n                this.incompatibilite.getIncomp(val).toPromise().then((res) => {\n                  this.incompRes = [res.blob];//A VERIFIER - BLOB PERMET DE RETROUVER LE BODY DE LA REPONSE!!\n                  this.informationCheck = true;\n                }).catch((err)=>{\n                  console.error('ERROR', err);\n                  this.errorCheck = true;\n                });\n              });\n            }\n          } else {\n            this.incompatibilite.getIncomp(val).toPromise().then((res) => {\n              this.incompRes = [res.blob];//A VERIFIER - BLOB PERMET DE RETROUVER LE BODY DE LA REPONSE!!\n              this.informationCheck = true;\n            }).catch((err)=>{\n              console.error('ERROR', err);\n              this.errorCheck = true;\n            });\n          }\n        });\n      });\n    }\n  }\n\n  envoieEmail(){\n    this.submitAttempt = true;\n    if(this.resultatsForm.valid){\n      //Stockage local des données remplies dans cette page de formulaire\n      this.localstockage.setData(this.resultatsForm.value).then((message) => {\n        console.log('Email : ' + message);\n        //Mise à jour/création du formulaire sur le serveur avec les données entrées sur cette page du formulaire\n        this.localstockage.getData(\"idForm\").then((val)=> {\n          this.localstockage.getAllData().then((dataForm)=>{\n            //il faut créer/mettre à jour le formulaire avec toutes les données stockées\n            if (val==null){\n              //Si le formulaire n'a pas été créé, il faut le créer\n              this.formulaire.createForm(dataForm);            \n            } else {\n              //Sinon, il faut le mettre à jour\n              this.formulaire.updateForm(val,dataForm);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  /**\n   * Fonction qui est liée au bouton \"Terminé\" sur la page de résultats du formulaire - Resultats.\n   * Si toutes les données ont été envoyées sur le serveur, elle détruit l'idForm stocké localement.\n   * Sinon, elle valide l'adresse email lorsque celle-ci a été saisie et la stocke localement.\n   * Elle réorganise le stockage des données qui n'ont pas été envoyées sur le serveur.\n   * Elle affiche ensuite la page d'accueil du formulaire - Accueil.\n   * @method nextPage\n   * @requires providers/localstockage - la fonction utilise les méthodes setData, getData, getAllData.\n   * @requires providers/formulaire - la fonction utilise les méthodes createForm et updateForm.\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  nextPage() {\n    this.localstockage.getAllData().then((dataForm)=>{\n      if (dataForm!=null){\n        //stocker les variables sous une autre forme puis aller à la page d'accueil\n      }      \n\n      //Navigation à la page d'accueil du formulaire - Accueil\n      this.navCtrl.popToRoot();\n    });\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/formulaire/resultats/resultats.ts","import {Component} from '@angular/core';\nimport {ViewController, NavParams} from 'ionic-angular';\n\nimport { Diacritics } from '../../providers/diacritics';\n\n@Component({\n  selector: 'autocomplete',\n  templateUrl: 'autocomplete.html'\n})\n\nexport class Autocomplete {\n  autocompleteItems;\n  autocompleteEntry;\n\n  constructor (public viewCtrl: ViewController, public params: NavParams, public diacritics: Diacritics) {\n    this.autocompleteItems = [];\n    this.autocompleteEntry = {\n      query: ''\n    };\n  }\n\n  /**\n   * Fonction qui supprime la page modale ouverte, sans passer de données à la page initiale.\n   * @method dismiss\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  dismiss() {\n    this.viewCtrl.dismiss();\n  }\n\n  /**\n   * Fonction qui supprime la page modale ouverte, en passant comme valeur à la page initiale la valeur sélectionnée dans la liste proposée (autocompletion).\n   * @method chooseItem\n   * @param {any} - la valeur sélectionnée dans la liste proposée est passée à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  chooseItem(item: any) {\n    this.autocompleteEntry.query = item;\n    this.viewCtrl.dismiss(item);\n  }\n  \n  /**\n   * Fonction qui supprime la page modale ouverte, en passant comme valeur à la page initiale la valeur entrée par l'utilisateur.\n   * @method search\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  enterItem(keyCode) {\n    if (this.params.get('enterAutocomplete')==true && keyCode==13){\n      this.viewCtrl.dismiss(this.autocompleteEntry.query);\n    }\n  }\n\n  /**\n   * Fonction qui, à chaque saisie de l'utilisateur, compare le contenu saisi et la liste proposée pour limiter la liste aux valeurs qui correspondent à la saisie : autocompletion.\n   * @method updateSearch\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {string} - une liste mise à jour suite à la nouvelle saisie de l'utilisateur est retournée par la fonction.\n   */\n  updateSearch() {\n    if (this.autocompleteEntry.query == '') {\n      this.autocompleteItems = [];\n    } else {\n      this.autocompleteItems = this.params.get('dataAutocomplete').filter((val)=>{\n        let strVal = this.diacritics.replaceDiacritics(val.toLowerCase());\n        let strEntry = this.diacritics.replaceDiacritics(this.autocompleteEntry.query.toLowerCase());\n        return strVal.indexOf(strEntry) > -1;\n      });\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/autocomplete/autocomplete.ts","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/toPromise';\n\nimport { Api } from './api';\nimport { LocalStockage } from './localstockage';\n\n/**\n * @class Traitement - Ce service utilise les requêtes définies dans le fichier providers/api pour faire l'interface entre le client et le serveur (et la table Traitement).\n * Les réponses du serveur aux requêtes envoyées sont des objets JSON, et doivent commencer par le champ `status` : \n * ```json\n * {\n *   status: 'success',\n *   traitres: {\n *     // ce champ doit contenir a minima l'id du formulaire, stocké sous le nom idForm.\n *   }\n * }\n * ```\n * Si le champ `status` n'est pas un `success`, une erreur est envoyée.\n */\n\n@Injectable()\nexport class Traitement {\n\n  public subCreate: any;\n\n  constructor(public http: Http, public api: Api, public localstockage: LocalStockage) { }\n\n  /**\n   * Méthode qui envoie une requête GET pour récupérer la liste des traitements enregistrés dans la base côté serveur. \n   * @method getTrait\n   * @requires providers/localstockage - la fonction utilise la méthode setData.\n   * @requires providers/api - la fonction utilise la méthode get.\n   * @param {} - aucun paramètre n'est passé à la méthode.\n   * @returns {Observable} - un observable est renvoyé pour suivre l'état de la requête. \n   */\n  getTrait() {\n\n    //Il faut s'assurer qu'il n'y a déjà pas une requête en cours lorsqu'on envoie une requête de récupération de la liste des données.\n    if(this.subCreate) {\n       this.subCreate.unsubscribe();\n    }\n\n    let seq = this.api.get('traitement').share();\n    \n    this.subCreate = seq.map(res => res.json())\n      .subscribe();\n\n    return seq;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/traitement.ts","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 159;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/@angular lazy\n// module id = 159\n// module chunks = 0","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 202;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src lazy\n// module id = 202\n// module chunks = 0","import { Injectable } from '@angular/core';\nimport { Storage } from '@ionic/storage';\n\n/**\n * @class LocalStockage - Ce service permet d'utiliser le stockage local de l'appareil.\n */\n\n@Injectable()\nexport class LocalStockage {\n\n  constructor(public storage: Storage) { }\n\n  /**\n   * Méthode qui permet d'enregistrer des données localement. les données sont enregistrées par paire clé/valeur.\n   * @method setData\n   * @param {Objet} - un objet est passé à la méthode qui enregistre indépendemment chacune de ses propriétés.\n   * @returns {Promise} - une promesse est renvoyée qui se termine lorsque l'ensemble des données a été enregistré. \n   */\n  setData(data) {\n    return new Promise((resolve,reject) => {\n      //Décomposition des propriétés de l'objet en paire clé/valeur\n      for(var propertyName in data) {\n        //console.log(propertyName + ' en cours d\\'enregistrement : ' + data[propertyName]);\n        this.storage.set(propertyName,data[propertyName]);//Enregistrement de la paire clé/valeur\n      }\n      resolve('enregistré !');\n    });\n  }\n\n  /**\n   * Méthode qui récupère une donnée stockée localement à partir de sa clé.\n   * @method getData \n   * @param {string} - le nom de la clé identifiant la donnée stockée.\n   * @returns {promise} - une promesse est renvoyée qui se termine lorsque la donnée est récupérée. \n   */\n  getData(data){\n      return this.storage.get(data);\n  }\n\n  /**\n   * Méthode qui permet de supprimer des données stockées localement. Seul l'identifiant d'un formulaire n'est pas supprimé.\n   * @method removeData \n   * @param {Objet} - l'objet dont les valeurs des propriétés doivent être supprimées.\n   * @returns {Promise} - une promesse est renvoyée qui se termine lorsque les données sont supprimées. \n   */\n  removeData(data){\n    return new Promise((resolve, reject) => {\n      for(var propertyName in data) {\n        //L'identifiant unique, qui peut être une des propriétés de l'objet data, n'est pas supprimé.\n        if (propertyName!=\"idForm\"){\n          this.storage.remove(propertyName).then(() => {\n            console.log('donnée supprimée');\n          });\n          console.log(propertyName + ' supprimée');\n        }\n      }\n      resolve('Supression des données');\n    });\n  }\n\n  /**\n   * Méthode qui récupère l'ensemble des données stockées localement, sauf l'identifiant du formulaire.\n   * @method getAllData\n   * @param {} - aucun paramètre n'est passé à la méthode.\n   * @returns {Promise} - une promesse est renvoyée avec les valeurs des donnés stockées sous la forme d'un objet. \n   */\n  getAllData(){\n    let data = {};\n    return new Promise((resolve, reject) => {\n      this.storage.forEach( (value, key, index) => {\n        if (typeof key === 'string' && key.endsWith('Form') && key!=\"idForm\"){\n          data[key]=value;\n          console.log('la valeur est ' + value + ' et la key est ' + key);\n        }\n      });\n      resolve(data);\n    }); \n  }\n\n  /**\n   * Méthode qui supprime TOUTES les données stockées localement.\n   * @method clearAllData \n   * @param {} - aucun paramètre n'est passé à la méthode.\n   * @returns {Promise} - une promesse est renvoyée lorsque toutes les données sont supprimées. \n   */\n  clearAllData(){\n      return this.storage.clear();\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/localstockage.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\nimport { DonneesPerso } from '../formulaire/donnees-perso/donnees-perso';\n\nimport { Formulaire } from '../../providers/formulaire';\nimport { LocalStockage } from '../../providers/localstockage';\n\n@Component({\n  selector: 'accueil',\n  templateUrl: 'accueil.html'\n})\nexport class Accueil {\n\n  constructor(public navCtrl: NavController, public formulaire: Formulaire, public localstockage: LocalStockage) {}\n\n  /**\n   * Fonction qui est liée au bouton \"Commencer le formulaire\" sur la page d'accueil.\n   * Elle récupère la date et l'heure au moment où le bouton est cliqué et stocke cette valeur localement. \n   * Une fois cette valeur stockée, elle crée un nouveau formulaire et affiche la première page du formulaire - Données Personnelles.\n   * @method nextPage\n   * @requires providers/localstockage - la fonction utilise la méthode setData.\n   * @requires providers/formulaire - la fonction utilise la méthode createForm.\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  nextPage() {\n    //Date de création du nouveau formulaire\n    interface dateObjet { dateForm: number };\n    var currentTime = new Date();\n    var dateCreaForm: dateObjet = {dateForm : currentTime.getFullYear()*100000000+(currentTime.getMonth()+1)*1000000+currentTime.getDate()*10000+currentTime.getHours()*100+currentTime.getMinutes()};\n\n    //Stockage local de la date de création du nouveau formulaire après avoir supprimer toutes les données déjà stockées\n    this.localstockage.clearAllData().then(()=>{\n      this.localstockage.setData(dateCreaForm).then((message) => {\n        console.log('Date de création du formulaire : ' + message);\n      \n        //Création d'un nouveau formulaire. La première donnée à entrer dans le formulaire est la date de création.\n        this.formulaire.createForm(dateCreaForm);\n        \n        //Navigation à la première page du formulaire - Données personnelles\n        this.navCtrl.push(DonneesPerso);\n      });\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/accueil/accueil.ts","import { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Component} from '@angular/core';\nimport { NavController, AlertController } from 'ionic-angular';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { Maladie } from '../maladie/maladie';\n\nimport { Inactif } from '../../../providers/inactif';\nimport { Formulaire } from '../../../providers/formulaire';\nimport { LocalStockage } from '../../../providers/localstockage';\n\n@Component({\n  selector: 'donnees-perso',\n  templateUrl: 'donnees-perso.html'\n})\nexport class DonneesPerso {\n\n  donneesPersoForm: FormGroup;\n  submitAttempt: boolean = false;\n  \n  constructor(public navCtrl: NavController,public alertCtrl: AlertController, translate: TranslateService, public formBuilder: FormBuilder, public inactif: Inactif, public formulaire: Formulaire, public localstockage: LocalStockage) {\n    //Construction du formulaire qui sera rempli sur cette page\n    this.donneesPersoForm = formBuilder.group({\n        prenomForm: ['', Validators.compose([Validators.maxLength(30), Validators.pattern('([a-zA-Zéèêëàäâùüûïîöôçÿ ]*)([\\-]?)([a-zA-Zéèêëàäâùüûïîöôçÿ ]*)'), Validators.required])],\n        nomForm: ['', Validators.compose([Validators.maxLength(30), Validators.pattern('([a-zA-Zéèêëàäâùüûïîöôçÿ ]*)([\\-]?)([a-zA-Zéèêëàäâùüûïîöôçÿ ]*)'), Validators.required])],\n        date_naissanceForm: ['', Validators.required]\n    });\n    //Si l'utilisateur est inactif, une alerte est envoyée avec la possibilité de continuer ou de recommencer le questionnaire.\n    //inactif.idleSet(navCtrl,alertCtrl);\n  }\n\n  /**\n   * Fonction qui est liée au bouton \"Continuer\" sur la première page du formulaire - Données personnelles.\n   * Elle valide les valeurs entrées dans les champs du formulaire et les stocke localement. \n   * Une fois ces valeurs stockées, elle récupère la valeur stockée correspondant à l'identificant du formulaire. \n   * Si aucun identifiant n'a été stocké, elle créé un nouveau formulaire avec toutes les données stockées. Sinon, elle met à jour le formulaire avec ces mêmes données.\n   * Elle affiche ensuite la deuxième page du formulaire - Maladie.\n   * @method nextPage\n   * @requires providers/localstockage - la fonction utilise les méthodes setData, getData, getAllData.\n   * @requires providers/formulaire - la fonction utilise les méthodes createForm et updateForm.\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  nextPage() {\n    this.submitAttempt = true;\n    if(this.donneesPersoForm.valid){\n\n      //Stockage local des données remplies dans cette page de formulaire\n      this.localstockage.setData(this.donneesPersoForm.value).then((message) => {\n        console.log('Données Personnelles : ' + message);\n\n        //Mise à jour/création du formulaire sur le serveur avec les données entrées sur cette page du formulaire\n        this.localstockage.getData(\"idForm\").then((val)=> {\n          this.localstockage.getAllData().then((dataForm)=>{\n            //il faut créer/mettre à jour le formulaire avec toutes les données stockées\n            if (val==null){\n              //Si le formulaire n'a pas été créé, il faut le créer\n              this.formulaire.createForm(dataForm);            \n            } else {\n              //Sinon, il faut le mettre à jour\n              this.formulaire.updateForm(val,dataForm);\n            }\n          });\n        });\n\n        //Navigation à la deuxième page du formulaire - Maladie\n        this.navCtrl.push(Maladie);\n\n      });\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/formulaire/donnees-perso/donnees-perso.ts","import { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { NavController, ModalController } from 'ionic-angular';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { TherapiesAlter } from '../therapies-alter/therapies-alter';\nimport{ Autocomplete } from '../../autocomplete/autocomplete';\n\nimport { Formulaire } from '../../../providers/formulaire';\nimport { LocalStockage } from '../../../providers/localstockage';\nimport { Traitement } from '../../../providers/traitement';\n\n@Component({\n  selector: 'maladie',\n  templateUrl: 'maladie.html'\n})\nexport class Maladie implements OnInit {\n\n  maladieForm: FormGroup;\n  submitAttempt: boolean = false;\n  organeTitre: string;\n  organePlaceholder: string;\n  organeNom = [\n    \"coeur\",\n    \"sein\",\n    \"côlon\",\n    \"rectum\",\n    \"pancréas\",\n    \"prostate\",\n    \"cerveau\",\n    \"moelle osseuse\",\n    \"sang\",\n    \"vaisseaux sanguins\",\n    \"testicules\",\n    \"poumons\"\n  ];\n  traitementNom = [];\n  traitementTitre: string;\n  traitementPlaceholder: string;\n  \n  constructor(public navCtrl: NavController, public modalCtrl: ModalController, public translate: TranslateService, public formBuilder: FormBuilder, public formulaire: Formulaire, public localstockage: LocalStockage, public traitement: Traitement) {\n    this.maladieForm = formBuilder.group({\n        organeForm: ['', Validators.compose([ Validators.pattern('([a-zA-Zéèêëàäâùüûïîöôçÿ ]*)([\\-]?)([a-zA-Zéèêëàäâùüûïîöôçÿ ]*)'), Validators.required])],\n        diagnosticForm: ['', Validators.required],\n        etatForm:  ['', Validators.required],\n        traitementForm: ['',Validators.compose([ Validators.pattern('([a-zA-Zéèêëàäâùüûïîöôçÿ ]*)([\\-]*)'), Validators.required])],\n        radioForm:  ['', Validators.required],\n        oncoForm: ['', Validators.compose([Validators.maxLength(30), Validators.pattern('([a-zA-Zéèêëàäâùüûïîöôçÿ. ]*)([\\-]?)([a-zA-Zéèêëàäâùüûïîöôçÿ ]*)')])]\n    });\n  }\n\n  ngOnInit(){\n    this.traitement.getTrait().toPromise().then((res) => {\n      this.traitementNom = [res.blob];//A VERIFIER - BLOB PERMET DE RETROUVER LE BODY DE LA REPONSE!!\n    }).catch((err)=>{\n      console.error('ERROR', err);\n    });\n  }\n\n  /**\n   * Fonction qui est liée au champ \"Organe primitif atteint\" sur la deuxième page du formulaire - Maladie.\n   * Elle permet d'ouvrir une page modale (pages/autocomplete) qui propose, en fonction des entrées de l'utilisateur une liste de noms possibles : autocompletion.\n   * @method showOrganeModal\n   * @requires pages/autocomplete - elle appelle la page autocomplete.ts.\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  showOrganeModal(){\n    this.translate.get('TITRE_MODAL_ORGANE').subscribe(value => {\n      this.organeTitre = value;\n    });\n    this.translate.get('PLACEHOLDER_MODAL_ORGANE').subscribe(value => {\n      this.organePlaceholder = value;\n    });\n    let modal = this.modalCtrl.create(Autocomplete, {dataAutocomplete: this.organeNom, titreAutocomplete: this.organeTitre, placeholderAutocomplete: this.organePlaceholder, enterAutocomplete: true});\n    modal.onDidDismiss(data => {\n      //console.log(data);\n      this.maladieForm.patchValue({organeForm: data});\n    });\n    modal.present();\n  }\n\n  /**\n   * Fonction qui est liée au champ \"Nom du traitement anti-cancéreux\" sur la deuxième page du formulaire - Maladie.\n   * Elle permet d'ouvrir une page modale (pages/autocomplete) qui propose, en fonction des entrées de l'utilisateur une liste de noms possibles : autocompletion.\n   * @method showOrganeModal\n   * @requires pages/autocomplete - elle appelle la page autocomplete.ts.\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  showTraitementModal(){\n    //console.log(this.traitementNom);\n    if (this.traitementNom.length > 0){\n      this.translate.get('TITRE_MODAL_TRAITEMENT').subscribe(value => {\n        this.traitementTitre = value;\n      });\n      this.translate.get('PLACEHOLDER_MODAL_TRAITEMENT').subscribe(value => {\n        this.traitementPlaceholder = value;\n      });\n      let modal = this.modalCtrl.create(Autocomplete, {dataAutocomplete: this.traitementNom, titreAutocomplete: this.traitementTitre, placeholderAutocomplete: this.traitementPlaceholder, enterAutocomplete: false});\n      modal.onDidDismiss(data => {\n        //console.log(data);\n        this.maladieForm.patchValue({traitementForm: data});\n      });\n      modal.present();\n    };\n  }\n\n  /**\n   * Fonction qui est liée au bouton \"Continuer\" sur la deuxième page du formulaire - Maladie.\n   * Elle valide les valeurs entrées dans les champs du formulaire et les stocke localement. \n   * Une fois ces valeurs stockées, elle récupère la valeur stockée correspondant à l'identificant du formulaire. \n   * Si aucun identifiant n'a été stocké, elle créé un nouveau formulaire avec toutes les données stockées. Sinon, elle met à jour le formulaire avec ces mêmes données.\n   * Elle affiche ensuite la troisième page du formulaire - Traitements Alternatifs.\n   * @method nextPage\n   * @requires providers/localstockage - la fonction utilise les méthodes setData, getData, getAllData.\n   * @requires providers/formulaire - la fonction utilise les méthodes createForm et updateForm.\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  nextPage() {\n    this.submitAttempt = true;\n    if(this.maladieForm.valid){\n\n      //Stockage local des données remplies dans cette page de formulaire\n      this.localstockage.setData(this.maladieForm.value).then((message) => {\n        console.log('Maladie : ' + message);\n\n        //Mise à jour/création du formulaire sur le serveur avec les données entrées sur cette page du formulaire\n        this.localstockage.getData(\"idForm\").then((val)=> {\n          this.localstockage.getAllData().then((dataForm)=>{\n            //il faut créer/mettre à jour le formulaire avec toutes les données stockées\n            if (val==null){\n              //Si le formulaire n'a pas été créé, il faut le créer\n              this.formulaire.createForm(dataForm);            \n            } else {\n              //Sinon, il faut le mettre à jour\n              this.formulaire.updateForm(val,dataForm);\n            }\n          });\n        });\n\n        //Navigation à la troisième page du formulaire - Traitements Alternatifs\n        this.navCtrl.push(TherapiesAlter);\n\n      });\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/formulaire/maladie/maladie.ts","import { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Component} from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { TraitementNom } from '../traitement-nom/traitement-nom';\nimport { Resultats } from '../resultats/resultats';\n\nimport { Formulaire } from '../../../providers/formulaire';\nimport { LocalStockage } from '../../../providers/localstockage';\nimport { TherapieValidator } from '../../../providers/validators';\n\n@Component({\n  selector: 'therapies-alter',\n  templateUrl: 'therapies-alter.html'\n})\nexport class TherapiesAlter{\n\n  therapiesAlterForm: FormGroup;\n  submitAttempt: boolean = false;\n\n  questionsTherapie: boolean = false;\n  checkAutres: boolean = false;\n  \n  constructor(public navCtrl: NavController, translate: TranslateService, public formBuilder: FormBuilder, public formulaire: Formulaire, public localstockage: LocalStockage) {\n    this.therapiesAlterForm = formBuilder.group({\n        therapiesForm: ['',Validators.required],\n        phytoForm: [false],\n        homeoForm: [false],\n        aromaForm: [false],\n        autres: [false],\n        autresForm: ['']\n    },{ validator: TherapieValidator.isValid}); \n  }\n\n  /**\n   * Fonction qui permet le déploiement d'un menu proposant différentes thérapies alternatives, après que l'utilisateur ait dit avoir recours à des thérapies alternatives.\n   * @method therapieOui\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  therapieOui() {\n    this.questionsTherapie = true;\n  }\n\n  /**\n   * Fonction qui supprime le menu proposant différentes thérapies alternatives, après que l'utilisateur ait dit ne pas avoir recours à des thérapies alternatives.\n   * @method therapieNon\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  therapieNon() {\n    this.questionsTherapie = false;\n    this.therapiesAlterForm.controls.phytoForm.setValue(false);\n    this.therapiesAlterForm.controls.homeoForm.setValue(false);\n    this.therapiesAlterForm.controls.aromaForm.setValue(false);\n    this.therapiesAlterForm.controls.autres.setValue(false);\n    this.therapiesAlterForm.controls.autresForm.setValue('');\n  }\n\n  /**\n   * Fonction qui permet le déploiement d'un champ permettant d'entrer le nom d'une thérapie alternative, après que l'utilisateur ait dit avoir recours à des thérapies alternatives qui ne sont pas listées dans le formulaire.\n   * @method autres\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  autres(){\n    if(this.checkAutres == false){\n      this.checkAutres = true;\n    }else{\n      this.checkAutres = false;\n      this.therapiesAlterForm.controls.autres.setValue(false);\n      this.therapiesAlterForm.controls.autresForm.setValue('');\n    }\n  }\n\n  /**\n   * Fonction qui est liée au bouton \"Continuer\" sur la troisième page du formulaire - Thérapies Alternatives.\n   * Elle valide les valeurs entrées dans les champs du formulaire et les stocke localement. \n   * Une fois ces valeurs stockées, elle récupère la valeur stockée correspondant à l'identificant du formulaire. \n   * Si aucun identifiant n'a été stocké, elle créé un nouveau formulaire avec toutes les données stockées. Sinon, elle met à jour le formulaire avec ces mêmes données.\n   * Elle affiche ensuite la quatrième page du formulaire si l'utilisateur utilise au moins une thérapie alternative - Nom des Thérapies. Sinon, elle affiche ensuite la page des résultats - Résultats.\n   * @method nextPage\n   * @requires providers/localstockage - la fonction utilise les méthodes setData, getData, getAllData.\n   * @requires providers/formulaire - la fonction utilise les méthodes createForm et updateForm.\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  nextPage() {\n    this.submitAttempt = true;\n    if(this.therapiesAlterForm.valid){\n\n      //Stockage local des données remplies dans cette page de formulaire\n      this.localstockage.setData(this.therapiesAlterForm.value).then((message) => {\n        console.log('Thérapies alternatives : ' + message);\n\n        //Mise à jour/création du formulaire sur le serveur avec les données entrées sur cette page du formulaire\n        this.localstockage.getData(\"idForm\").then((val)=> {\n          this.localstockage.getAllData().then((dataForm)=>{\n            //il faut créer/mettre à jour le formulaire avec toutes les données stockées\n            if (val==null){\n              //Si le formulaire n'a pas été créé, il faut le créer\n              this.formulaire.createForm(dataForm);            \n            } else {\n              //Sinon, il faut le mettre à jour\n              this.formulaire.updateForm(val,dataForm);\n            }\n          });\n        });\n\n        //Navigation qui dépend de la saisie de l'utilisateur.\n        if (this.therapiesAlterForm.controls.phytoForm.value){\n          //Si l'utilisateur utilise au moin une thérapie alternative, navigation à la quatrième page du formulaire pour entrer le nom des thérapies. \n          this.navCtrl.push(TraitementNom);\n        }else{\n          //Si l'utilisateur n'utilise aucune thérapie alternative, navigation à la page des résultats du formulaire.\n          this.navCtrl.push(Resultats);\n        }\n\n      });\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/formulaire/therapies-alter/therapies-alter.ts","import { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Component, OnInit} from '@angular/core';\nimport { NavController, ModalController } from 'ionic-angular';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { Resultats } from '../resultats/resultats';\nimport{ Autocomplete } from '../../autocomplete/autocomplete';\n\nimport { Formulaire } from '../../../providers/formulaire';\nimport { LocalStockage } from '../../../providers/localstockage';\nimport { Traitement } from '../../../providers/traitement';\n\n@Component({\n  selector: 'traitement-nom',\n  templateUrl: 'traitement-nom.html'\n})\nexport class TraitementNom implements OnInit{\n\n  traitementNomForm: FormGroup;\n  submitAttempt: boolean = false;\n  checkTraitement: boolean = false;\n  nbTraitement: number = 0;\n  traitementTable = [];\n\n  traitementNom = [];\n  traitementTitre: string;\n  traitementPlaceholder: string;\n  \n  constructor(public navCtrl: NavController, public modalCtrl: ModalController, public translate: TranslateService, public formBuilder: FormBuilder, public formulaire: Formulaire, public localstockage: LocalStockage, public traitement: Traitement) {\n    this.traitementNomForm = formBuilder.group({});\n  }\n\n  ngOnInit(){\n    this.createTraitObjet();\n    this.traitementNomForm.addControl(this.traitementTable[0].phytonom, this.traitementTable[0].phytonomControl);\n    this.traitementNomForm.addControl(this.traitementTable[0].phytodate, this.traitementTable[0].phytodateControl);\n    /* this.traitement.getTrait().toPromise().then((res) => {\n      this.traitementNom = [res.blob];//A VERIFIER - BLOB PERMET DE RETROUVER LE BODY DE LA REPONSE!!\n    }).catch((err)=>{\n      console.error('ERROR', err);\n    }); */\n  }\n\n  /**\n   * Fonction qui créé une paire nom du traitement/date de début du traitement et la stocke dans un tableau.\n   * @method createTraitObjet\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  createTraitObjet(){\n    this.nbTraitement = this.nbTraitement+1;\n    interface traitementObjet {\n      phytonom : string,\n      phytodate: any,\n      phytonomControl : FormControl,\n      phytodateControl : FormControl\n    };\n    var phytoForm: traitementObjet = {\n      phytonom: \"phytonom_\"+this.nbTraitement.toString()+\"_Form\",\n      phytodate: \"phytodate_\"+this.nbTraitement.toString()+\"_Form\",\n      phytonomControl : new FormControl ('',  Validators.compose([ Validators.pattern('([a-zA-Zéèêëàäâùüûïîöôçÿ ]*)([\\-]*)'), Validators.required])),\n      phytodateControl : new FormControl ('')\n    }\n    this.traitementTable.push(phytoForm);\n  }\n\n  /**\n   * Fonction qui permet d'ajouter un traitement.\n   * @method addPhyto\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  addPhyto() {\n    if (this.traitementNomForm.valid){\n      let i: number = this.traitementTable.length;\n      this.createTraitObjet();\n      // add phyto treatment to the list\n      this.traitementNomForm.addControl(this.traitementTable[i].phytonom, this.traitementTable[i].phytonomControl);\n      this.traitementNomForm.addControl(this.traitementTable[i].phytodate, this.traitementTable[i].phytodateControl);\n      this.checkTraitement = false;\n      this.submitAttempt = false;\n    }else{\n      this.checkTraitement = true;\n    }\n  }\n\n  /**\n   * Fonction qui permet de supprimer un traitement.\n   * @method removePhyto\n   * @requires providers/localstockage - la fonction utilise la méthode removeData.\n   * @param {number} - le numéro du traitement à supprimer est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  removePhyto(i: number) {\n    // remove phyto treatment from the list\n    var suppressionObjet = {}\n    suppressionObjet[this.traitementTable[i].phytonom] = this.traitementNomForm.value[this.traitementTable[i].phytonom];\n    suppressionObjet[this.traitementTable[i].phytodate] = this.traitementNomForm.value[this.traitementTable[i].phytodate];\n    console.log(suppressionObjet);\n    this.localstockage.removeData(suppressionObjet);\n    this.traitementNomForm.removeControl(this.traitementTable[i].phytonom);\n    this.traitementNomForm.removeControl(this.traitementTable[i].phytodate);\n    this.traitementTable.splice(i,1);\n  }\n\n  /**\n   * Fonction qui est liée au champ \"Nom du traitement\" sur la page du formulaire - Nom des Thérapies.\n   * Elle permet d'ouvrir une page modale (pages/autocomplete) qui propose, en fonction des entrées de l'utilisateur une liste de noms possibles : autocompletion.\n   * @method showOrganeModal\n   * @requires pages/autocomplete - elle appelle la page autocomplete.ts.\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  showTraitementModal(i: number){\n    //console.log(this.traitementNom);\n    if (this.traitementNom.length > 0){\n      this.translate.get('TITRE_MODAL_TRAITEMENT_BIS').subscribe(value => {\n        this.traitementTitre = value;\n      });\n      this.translate.get('PLACEHOLDER_MODAL_TRAITEMENT').subscribe(value => {\n        this.traitementPlaceholder = value;\n      });\n      let modal = this.modalCtrl.create(Autocomplete, {dataAutocomplete: this.traitementNom, titreAutocomplete: this.traitementTitre, placeholderAutocomplete: this.traitementPlaceholder, enterAutocomplete: false});\n      modal.onDidDismiss(data => {\n        //console.log(data);\n        let dataObj =  {};\n        dataObj[this.traitementTable[i].phytonom] = data;\n        this.traitementNomForm.patchValue(dataObj);\n      });\n      modal.present();\n    };\n  }\n\n  /**\n   * Fonction qui est liée au bouton \"Continuer\" sur la quatrième page du formulaire - Nom des Thérapies.\n   * Elle valide les valeurs entrées dans les champs du formulaire et les stocke localement. \n   * Une fois ces valeurs stockées, elle récupère la valeur stockée correspondant à l'identificant du formulaire. \n   * Si aucun identifiant n'a été stocké, elle créé un nouveau formulaire avec toutes les données stockées. Sinon, elle met à jour le formulaire avec ces mêmes données.\n   * Elle affiche ensuite la page des résultats du formulaire - Résultats.\n   * @method nextPage\n   * @requires providers/localstockage - la fonction utilise les méthodes setData, getData, getAllData.\n   * @requires providers/formulaire - la fonction utilise les méthodes createForm et updateForm.\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {} - aucune valeur n'est retournée par la fonction.\n   */\n  nextPage() {\n    this.submitAttempt = true;\n    if(this.traitementNomForm.valid){\n\n      //Stockage local des données remplies dans cette page de formulaire\n      this.localstockage.setData(this.traitementNomForm.value).then((message) => {\n        console.log('********************************************************');\n        console.log('Nom des Thérapies : ' + message);\n        //Mise à jour/création du formulaire sur le serveur avec les données entrées sur cette page du formulaire\n        this.localstockage.getData(\"idForm\").then((val)=> {\n          this.localstockage.getAllData().then((dataForm)=>{\n            //il faut créer/mettre à jour le formulaire avec toutes les données stockées\n            if (val==null){\n              //Si le formulaire n'a pas été créé, il faut le créer\n              this.formulaire.createForm(dataForm);            \n            } else {\n              //Sinon, il faut le mettre à jour\n              this.formulaire.updateForm(val,dataForm);\n            }\n          });\n        });\n\n        //Navigation à la page des résultats du formulaire - Résultats\n        this.navCtrl.push(Resultats);\n\n      });\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/formulaire/traitement-nom/traitement-nom.ts","import { Injectable } from '@angular/core';\n\n\n/**\n * @class Diacritics - Ce service recence l'ensemble des caractères spéciaux qui peuvent être remplacés par des caractères simples lors d'une saisie de l'utilisateur.\n * Il facilite la comparaison entre les données saisies et celles attendues, notamment lors de l'autocompletion.\n */\n\n@Injectable()\nexport class Diacritics {\n  \n  defaultDiacritics = [];\n\n  constructor() {\n    this.defaultDiacritics = [\n      {'base':'A', 'letters':/[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F]/g},\n      {'base':'AA','letters':/[\\uA732]/g},\n      {'base':'AE','letters':/[\\u00C6\\u01FC\\u01E2]/g},\n      {'base':'AO','letters':/[\\uA734]/g},\n      {'base':'AU','letters':/[\\uA736]/g},\n      {'base':'AV','letters':/[\\uA738\\uA73A]/g},\n      {'base':'AY','letters':/[\\uA73C]/g},\n      {'base':'B', 'letters':/[\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181]/g},\n      {'base':'C', 'letters':/[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E]/g},\n      {'base':'D', 'letters':/[\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779]/g},\n      {'base':'DZ','letters':/[\\u01F1\\u01C4]/g},\n      {'base':'Dz','letters':/[\\u01F2\\u01C5]/g},\n      {'base':'E', 'letters':/[\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E]/g},\n      {'base':'F', 'letters':/[\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B]/g},\n      {'base':'G', 'letters':/[\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E]/g},\n      {'base':'H', 'letters':/[\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D]/g},\n      {'base':'I', 'letters':/[\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197]/g},\n      {'base':'J', 'letters':/[\\u004A\\u24BF\\uFF2A\\u0134\\u0248]/g},\n      {'base':'K', 'letters':/[\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2]/g},\n      {'base':'L', 'letters':/[\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780]/g},\n      {'base':'LJ','letters':/[\\u01C7]/g},\n      {'base':'Lj','letters':/[\\u01C8]/g},\n      {'base':'M', 'letters':/[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C]/g},\n      {'base':'N', 'letters':/[\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4]/g},\n      {'base':'NJ','letters':/[\\u01CA]/g},\n      {'base':'Nj','letters':/[\\u01CB]/g},\n      {'base':'O', 'letters':/[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C]/g},\n      {'base':'OI','letters':/[\\u01A2]/g},\n      {'base':'OO','letters':/[\\uA74E]/g},\n      {'base':'OU','letters':/[\\u0222]/g},\n      {'base':'P', 'letters':/[\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754]/g},\n      {'base':'Q', 'letters':/[\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A]/g},\n      {'base':'R', 'letters':/[\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782]/g},\n      {'base':'S', 'letters':/[\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784]/g},\n      {'base':'T', 'letters':/[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786]/g},\n      {'base':'TZ','letters':/[\\uA728]/g},\n      {'base':'U', 'letters':/[\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244]/g},\n      {'base':'V', 'letters':/[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245]/g},\n      {'base':'VY','letters':/[\\uA760]/g},\n      {'base':'W', 'letters':/[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72]/g},\n      {'base':'X', 'letters':/[\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C]/g},\n      {'base':'Y', 'letters':/[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE]/g},\n      {'base':'Z', 'letters':/[\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762]/g},\n      {'base':'a', 'letters':/[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250]/g},\n      {'base':'aa','letters':/[\\uA733]/g},\n      {'base':'ae','letters':/[\\u00E6\\u01FD\\u01E3]/g},\n      {'base':'ao','letters':/[\\uA735]/g},\n      {'base':'au','letters':/[\\uA737]/g},\n      {'base':'av','letters':/[\\uA739\\uA73B]/g},\n      {'base':'ay','letters':/[\\uA73D]/g},\n      {'base':'b', 'letters':/[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253]/g},\n      {'base':'c', 'letters':/[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g},\n      {'base':'d', 'letters':/[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A]/g},\n      {'base':'dz','letters':/[\\u01F3\\u01C6]/g},\n      {'base':'e', 'letters':/[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD]/g},\n      {'base':'f', 'letters':/[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C]/g},\n      {'base':'g', 'letters':/[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F]/g},\n      {'base':'h', 'letters':/[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/g},\n      {'base':'hv','letters':/[\\u0195]/g},\n      {'base':'i', 'letters':/[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131]/g},\n      {'base':'j', 'letters':/[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/g},\n      {'base':'k', 'letters':/[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3]/g},\n      {'base':'l', 'letters':/[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747]/g},\n      {'base':'lj','letters':/[\\u01C9]/g},\n      {'base':'m', 'letters':/[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F]/g},\n      {'base':'n', 'letters':/[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5]/g},\n      {'base':'nj','letters':/[\\u01CC]/g},\n      {'base':'o', 'letters':/[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/g},\n      {'base':'oi','letters':/[\\u01A3]/g},\n      {'base':'ou','letters':/[\\u0223]/g},\n      {'base':'oo','letters':/[\\uA74F]/g},\n      {'base':'p','letters':/[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755]/g},\n      {'base':'q','letters':/[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/g},\n      {'base':'r','letters':/[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783]/g},\n      {'base':'s','letters':/[\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B]/g},\n      {'base':'t','letters':/[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787]/g},\n      {'base':'tz','letters':/[\\uA729]/g},\n      {'base':'u','letters':/[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289]/g},\n      {'base':'v','letters':/[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/g},\n      {'base':'vy','letters':/[\\uA761]/g},\n      {'base':'w','letters':/[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g},\n      {'base':'x','letters':/[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/g},\n      {'base':'y','letters':/[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF]/g},\n      {'base':'z','letters':/[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763]/g}\n    ]\n  }\n\n  /**\n   * Méthode qui envoie remplace l'ensemble des caractères spéciaux par leurs équivalents plus simples.\n   * @method replaceDiacritics\n   * @param {string} - une chaîne de caractère est passé à la méthode.\n   * @returns {string} - une chaîne de caractère est renvoyée, dans laquelle tous les caractères spéciaux ont été remplacés.\n   */\n  replaceDiacritics(strVal) {\n    for(var i=0; i<this.defaultDiacritics.length; i++) {\n      strVal = strVal.replace(this.defaultDiacritics[i].letters, this.defaultDiacritics[i].base);\n    }\n    return strVal;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/diacritics.ts","import { FormGroup } from '@angular/forms';\n\nexport class TherapieValidator {\n    \n    static isValid(group: FormGroup): any {\n        var therapiesForm = group.controls.therapiesForm.value;\n        var phytoForm = group.controls.phytoForm.value;\n        var homeoForm = group.controls.homeoForm.value;\n        var aromaForm = group.controls.aromaForm.value;\n        var autres = group.controls.autres.value;\n        var autresForm = group.controls.autresForm.value;\n        \n        if(therapiesForm ==\"oui\"){\n            if (autres && autresForm==''){\n                group.controls.autresForm.setErrors({\"autres_empty\": true});\n            }\n            if (!phytoForm && !homeoForm && !aromaForm && !autres){\n                return {\n                    \"empty\": true\n                };\n            }else{\n                return null;\n            }\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/validators.ts","import { Injectable } from '@angular/core';\nimport {Observable} from 'rxjs/Rx';\nimport {Idle, DEFAULT_INTERRUPTSOURCES} from '@ng-idle/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { LocalStockage } from './localstockage';\n\n/**\n * @class Inactif - Ce service permet de vérifier si l'utilisateur est actif ou pas, et le cas échéant de le renvoyer vers la page d'accueil du formulaire.\n */\n\n@Injectable()\nexport class Inactif {\n\n  idleCount: number = 15; //Fixe le temps avant que l'utilisateur, une fois inactif, soit redirigé vers la page d'accueil.\n  idleState: any;\n\n  constructor(public translate: TranslateService, private idle: Idle, public localstockage: LocalStockage) {\n    // Temps à partir duquel on estime que l'utilisateur est inactif.\n    idle.setIdle(5);\n    // Actions qui terminent l'inactivité.\n    idle.setInterrupts(DEFAULT_INTERRUPTSOURCES);\n  }\n\n  /**\n   * Méthode qui lance la détection de l'inactivité de l'utilisateur, et qui, une fois l'inactivité détectée, ouvre une fenêtre d'alerte. \n   * @method idleSet\n   * @requires providers/inactif - la fonction utilise la méthode idleRedirectConfirm.\n   * @param {Controller, Controller} - les deux controlleurs, qui correspondent à la page sur laquelle l'utilisateur est présent et à la fenêtre d'alerte sont passées à la méthode.\n   * @returns {} - aucune valeur n'est retournée par la méthode.\n   */\n  idleSet(navCtrl,alertCtrl) {\n    this.idle.watch();\n    this.idleState = this.idle.onIdleStart.subscribe(()=>this.idleRedirectConfirm(navCtrl,alertCtrl));\n  }\n\n  /**\n   * Méthode qui lance un timer.\n   * @method idleTimer\n   * @param {} - aucun paramètre n'est passé à la fonction.\n   * @returns {Observable} - un observable est renvoyé pour suivre l'état du timer.\n   */\n  idleTimer(){  \n    return Observable.timer(0,1000);\n  }\n\n  /**\n   * Méthode qui ouvre une fenêtre d'alerte pour informer à l'utilisateur qu'il est inactif. \n   * L'utilisateur peut soit confirmer la redirection vers la redirection vers la page d'accueil, soit l'annuler, soit attendre qu'il soit redirigé au terme d'un compte à rebours.\n   * La redirection s'accompagne d'une suppression de toutes les données stockées localement.\n   * @method idleRedirectConfirm\n   * @requires providers/inactif - la fonction utilise la méthode idleSet, idleTimer.\n   * @requires providers/localstockage - la fonction utilise la méthode clearAllData.\n   * @param {Controller, Controller} - les deux controlleurs, qui correspondent à la page sur laquelle l'utilisateur est présent et à la fenêtre d'alerte sont passées à la méthode.\n   * @returns {} - aucune valeur n'est retournée par la méthode.\n   */\n  idleRedirectConfirm(navCtrl,alertCtrl) {\n    //Arrêt de la détection de l'inactivité de l'utilisateur\n    this.idleState.unsubscribe();\n    this.idle.stop();\n\n    //Création de la fenêtre d'alerte\n    let buttonTextConfirm: string;\n    let buttonTextCancel: string;\n    this.translate.get('BOUTON_CONFIRM_ALERTE').subscribe(value => {\n      buttonTextConfirm = value;\n    });\n    this.translate.get('BOUTON_ANNUL_ALERTE').subscribe(value => {\n      buttonTextCancel = value;\n    });\n\n    let alert = alertCtrl.create({\n      title: '',\n      subTitle: '',\n      message: '',\n      buttons: [\n        {\n          text: buttonTextConfirm,\n          handler: () =>{ \n            timer.unsubscribe();\n            alert.dismiss().then(() => {\n              navCtrl.popToRoot();\n            });\n            return false;//La fermeture de l'alerte est faite manuellement, par alert.dismiss(), une fois la suppression des données effectuées.\n          }\n        },\n        {\n          text: buttonTextCancel,\n          role: 'cancel',\n          handler: () =>{\n            //Relance de la détection de l'inactivité de l'utilisateur\n            this.idleSet(navCtrl,alertCtrl);\n            timer.unsubscribe();\n          }\n        }\n      ]\n    });\n    let titre: string;\n    let message: string;\n    this.translate.get('TITRE_ALERTE').subscribe(value => {\n      titre = value;\n    });\n    this.translate.get('MESSAGE_ALERTE').subscribe(value => {\n      message = value;\n    });\n    alert.setTitle(titre);\n    alert.setMessage(message);\n    //Création d'un compte à rebours qui, une fois à zéro, redirige l'utilisateur vers la page d'accueil du formulaire\n    let timer = this.idleTimer().subscribe((t)=>{\n      let count = this.idleCount-t;\n      if (count>=0){\n        let sousTitrePrinc: string;\n        let sousTitreUnit: string;\n        this.translate.get('SOUSTITRE_ALERTE').subscribe(value => {\n          sousTitrePrinc = value;\n        });\n        this.translate.get('SOUSTITRE_UNIT_ALERTE').subscribe(value => {\n          sousTitreUnit = value;\n        });\n        alert.setSubTitle(sousTitrePrinc + count + sousTitreUnit);\n      } else {\n        //La redirection vers la page d'accueil est précédé d'une suppression des données stockées localement\n        timer.unsubscribe();\n        alert.dismiss().then(() => {\n          navCtrl.popToRoot();\n        });\n      }\n    });\n    \n    alert.present();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/inactif.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { NgModule, ErrorHandler } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpModule, Http } from '@angular/http';\nimport { IonicApp, IonicModule, IonicErrorHandler } from 'ionic-angular';\nimport { IonicStorageModule } from '@ionic/storage';\nimport { NgIdleModule } from '@ng-idle/core';\n\nimport { MyApp } from './app.component';\n\nimport { Accueil } from '../pages/accueil/accueil';\nimport { DonneesPerso } from '../pages/formulaire/donnees-perso/donnees-perso';\nimport { Maladie } from '../pages/formulaire/maladie/maladie';\nimport { TherapiesAlter } from '../pages/formulaire/therapies-alter/therapies-alter';\nimport { TraitementNom } from '../pages/formulaire/traitement-nom/traitement-nom';\nimport { Resultats } from '../pages/formulaire/resultats/resultats';\nimport { Autocomplete } from '../pages/autocomplete/autocomplete';\n\nimport { Api } from '../providers/api';\nimport { Inactif } from '../providers/inactif';\nimport { Formulaire } from '../providers/formulaire';\nimport { LocalStockage } from '../providers/localstockage';\nimport { Diacritics } from '../providers/diacritics';\nimport { Traitement } from '../providers/traitement';\nimport { TherapieValidator } from '../providers/validators';\n\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { StatusBar } from '@ionic-native/status-bar';\n\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\n\n// The translate loader needs to know where to load i18n files in Ionic's static asset pipeline.\nexport function HttpLoaderFactory(http: Http) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n\n@NgModule({\n  declarations: [\n    MyApp,\n    Accueil,\n    DonneesPerso,\n    Maladie,\n    TherapiesAlter,\n    TraitementNom,\n    Resultats,\n    Autocomplete\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [Http]\n      }\n    }),\n    NgIdleModule.forRoot(),\n    IonicModule.forRoot(MyApp),\n    IonicStorageModule.forRoot()\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    MyApp,\n    Accueil,\n    DonneesPerso,\n    Maladie,\n    TherapiesAlter,\n    TraitementNom,\n    Resultats,\n    Autocomplete\n  ],\n  providers: [\n    Api,\n    Inactif,\n    Formulaire,\n    LocalStockage,\n    Diacritics,\n    Traitement,\n    TherapieValidator,\n    SplashScreen,\n    StatusBar,\n    // Keep this to enable Ionic's runtime error handling during development\n    { provide: ErrorHandler, useClass: IonicErrorHandler }\n  ]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component} from '@angular/core';\nimport { Platform } from 'ionic-angular';\n\nimport { StatusBar } from '@ionic-native/status-bar';\nimport { SplashScreen } from '@ionic-native/splash-screen';\nimport { Storage } from '@ionic/storage';\n\nimport { Accueil } from '../pages/accueil/accueil';\n\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  template: `<ion-nav [root]=\"rootPage\"></ion-nav>`\n})\nexport class MyApp {\n  rootPage = Accueil;\n\n  constructor(private translate: TranslateService, private platform: Platform, private statusBar: StatusBar, private splashScreen: SplashScreen, private storage: Storage) {\n    this.initTranslate();\n  }\n\n  ionViewDidLoad() {\n    this.platform.ready().then(() => {\n      this.storage.ready().then(()=>{\n        // Suppression des valeurs stockées localement au lancement de l'application\n        this.storage.clear().then(()=>{  \n          this.statusBar.styleDefault();\n          this.splashScreen.hide();\n        });\n      });\n    });\n  }\n\n  initTranslate() {\n    // Set the default language for translation strings, and the current language.\n    this.translate.setDefaultLang('fr');\n\n    if (this.translate.getBrowserLang() !== undefined) {\n      this.translate.use(this.translate.getBrowserLang());\n    } else {\n      this.translate.use('fr'); // Set your language here\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/toPromise';\n\nimport { Api } from './api';\nimport { LocalStockage } from './localstockage';\n\n/**\n * @class Incompatibilite - Ce service utilise les requêtes définies dans le fichier providers/api pour faire l'interface entre le client et le serveur (table incompatibilités notamment).\n * Les réponses du serveur aux requêtes envoyées sont des objets JSON, et doivent commencer par le champ `status` : \n * ```json\n * {\n *   status: 'success',\n *   resultats: {\n *     // ce champ doit contenir a minima l'id du formulaire, stocké sous le nom idForm.\n *   }\n * }\n * ```\n * Si le champ `status` n'est pas un `success`, une erreur est envoyée.\n */\n\n@Injectable()\nexport class Incompatibilite {\n\n  public subCreate: any;\n\n  constructor(public http: Http, public api: Api, public localstockage: LocalStockage) { }\n\n  /**\n   * Méthode qui envoie une requête GET pour récupérer la liste des incompatibilités liés à un formulaire. \n   * @method getIncomp\n   * @requires providers/localstockage - la fonction utilise la méthode setData.\n   * @requires providers/api - la fonction utilise la méthode get.\n   * @param {any} - l'identifiant du formulaire, idForm, est passé à la méthode.\n   * @returns {Observable} - un observable est renvoyé pour suivre l'état de la requête. \n   */\n  getIncomp(idData) {\n\n    //Il faut s'assurer qu'il n'y a déjà pas une requête en cours lorsqu'on envoie une requête de récupération de la liste des données.\n    if(this.subCreate) {\n       this.subCreate.unsubscribe();\n    }\n\n    let seq = this.api.get('incompatibilite',idData).share();\n    \n    this.subCreate = seq.map(res => res.json())\n      .subscribe();\n\n    return seq;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/incompatibilite.ts","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/toPromise';\n\nimport { Api } from './api';\nimport { LocalStockage } from './localstockage';\n\n/**\n * @class Formulaire - Ce service utilise les requêtes définies dans le fichier providers/api pour faire l'interface entre le client et le serveur.\n * Les réponses du serveur aux requêtes envoyées sont des objets JSON, et doivent commencer par le champ `status` : \n * ```json\n * {\n *   status: 'success',\n *   formres: {\n *     // ce champ doit contenir a minima l'id du formulaire, stocké sous le nom idForm.\n *   }\n * }\n * ```\n * Si le champ `status` n'est pas un `success`, une erreur est envoyée.\n */\n\n@Injectable()\nexport class Formulaire {\n\n  public subCreate: any;\n\n  constructor(public http: Http, public api: Api, public localstockage: LocalStockage) { }\n\n  /**\n   * Méthode qui envoie une requête POST pour créer un nouveau formulaire côté serveur. \n   * La création d'un nouveau formulaire s'accompagne par la création d'un identifiant unique côté serveur, renvoyé dans la réponse du serveur.\n   * @method createForm\n   * @requires providers/localstockage - la fonction utilise les méthodes setData, removeData.\n   * @requires providers/api - la fonction utilise la méthode post.\n   * @param {Objet} - un objet est passé à la méthode qui va envoyer chacune des propriétés de l'objet au serveur.\n   * @returns {Observable} - un observable est renvoyé pour suivre l'état de la requête. \n   */\n  createForm(dataForm) {\n\n    //On ne peut créer qu'un seul formulaire côté serveur. Il faut s'assurer qu'il n'y a déjà pas une requête en cours lorsqu'on envoie une requête de création du formulaire.\n    if(this.subCreate) {\n       this.subCreate.unsubscribe();\n    }\n    \n    let seq = this.api.post('formulaire', dataForm).share();\n\n    this.subCreate = seq.map(res => res.json())\n      .subscribe(res => {\n        // Si la requête est un succès, l'identifiant du formulaire est stocké localement\n        if (res.status == 'success') {\n          this.localstockage.setData(JSON.parse(res.formres)); // Le stockage de l'identifiant du formulaire doit avoir le nom idForm.\n          this.localstockage.removeData(dataForm);//Il faut ensuite supprimer toutes les données qui ont été enregistrées sur le serveur, sauf l'identifiant du formulaire.\n        }\n      }, err => {\n        //console.error('ERROR', err);\n      });\n\n    return seq;\n  }\n\n  /**\n   * Méthode qui envoie une requête PATCH pour mettre à jour le formulaire côté serveur. \n   * @method updateForm\n   * @requires providers/localstockage - la fonction utilise la méthode removeData.\n   * @requires providers/api - la fonction utilise la méthode patch.\n   * @param {any, Objet} - une variable avec la valeur de l'identifiant du formulaire et les données à mettre à jour, sous la forme d'un objet, sont passées à la méthode.\n   * @returns {Observable} - un observable est renvoyé pour suivre l'état de la requête. \n   */\n  updateForm(idForm, dataForm) {\n    \n    //On doit s'assurer que les données mises à jour soient mise à jour dans le bon ordre : il est préférable d'annuler toute requête déjà existante.\n    if(this.subCreate) {\n       this.subCreate.unsubscribe();\n    }\n    \n    let seq = this.api.patch('formulaire/' + idForm.toString(), dataForm).share();\n\n    this.subCreate = seq.map(res => res.json())\n      .subscribe(res => {\n        if (res.status == 'success') {\n          this.localstockage.removeData(dataForm);//Il faut ensuite supprimer toutes les données qui ont été enregistrées sur le serveur, sauf l'identifiant du formulaire.\n        }\n      }, err => {\n        //console.error('ERROR', err);\n      });\n\n    return seq;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/formulaire.ts","import { Injectable } from '@angular/core';\nimport { Http, RequestOptions, URLSearchParams } from '@angular/http';\nimport 'rxjs/add/operator/map';\n\n/**\n * @class Api - Ce service prend en charge les requêtes vers l'API REST côté client. Il faut, avant toute chose, déterminer l'URL de l'API.\n * Les données échangées doivent être en format JSON. Les données reçues doivent toujours commencer par le champ 'status' :\n * ```json\n * {\n *   status: 'success',\n *   formres: {\n *     // ce champ doit contenir a minima l'id du formulaire, stocké sous le nom idForm\n *   }\n * }\n * ```\n * Si le champ `status` n'est pas un `success`, une erreur est envoyée.\n */\n\n@Injectable()\nexport class Api {\n  \n  url: string = 'https://example.com/api/v1';\n\n  constructor(public http: Http) {}\n\n  /**\n   * Méthode qui envoie une requête GET à l'API pour récupérer des données. \n   * @method get\n   */\n  get(endpoint: string, params?: any, options?: RequestOptions) {\n    if (!options) {\n      options = new RequestOptions();\n    }\n\n    // Support easy query params for GET requests\n    if (params) {\n      let p = new URLSearchParams();\n      for (let k in params) {\n        p.set(k, params[k]);\n      }\n      // Set the search field if we have params and don't already have\n      // a search field set in options.\n      options.search = !options.search && p || options.search;\n    }\n\n    return this.http.get(this.url + '/' + endpoint, options);\n  }\n\n  /**\n   * Méthode qui envoie une requête POST à l'API pour envoyer des données sur le serveur. \n   * Cette méthode est utilisée lorsque l'URI pour accéder à la ressource n'est pas encore créée et sera créée côté serveur. Les données envoyées seront donc dans un sous-domaine de l'URI utilisée pour envoyer les données.\n   * @method post\n   */\n  post(endpoint: string, data: any, options?: RequestOptions) {\n    var body: any;\n    body = JSON.stringify(data);\n    return this.http.post(this.url + '/' + endpoint, body, options);\n  }\n\n  /**\n   * Méthode qui envoie une requête PUT à l'API pour envoyer des données sur le serveur. \n   * Cette méthode est utilisée lorsque l'URI pour accéder à la ressource est déterminée par le client : c'est l'URI utilisée pour envoyer les données.\n   * @method put\n   */\n  put(endpoint: string, body: any, options?: RequestOptions) {\n    return this.http.put(this.url + '/' + endpoint, body, options);\n  }\n\n  /**\n   * Méthode qui envoie une requête DELETE à l'API pour supprimer des données sur le serveur.\n   * @method delete\n   */\n  delete(endpoint: string, options?: RequestOptions) {\n    return this.http.delete(this.url + '/' + endpoint, options);\n  }\n\n  /**\n   * Méthode qui envoie une requête PATCH à l'API pour envoyer des données sur le serveur. \n   * Cette méthode est utilisée lorsque les données envoyées sont une mise à jour d'une ressource déjà identifiée. Les données correspondent donc à un format attendu.\n   * @method patch\n   */\n  patch(endpoint: string, data: any, options?: RequestOptions) {\n    var body: any;\n    body = JSON.stringify(data);\n    return this.http.put(this.url + '/' + endpoint, body, options);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/api.ts"],"sourceRoot":""}